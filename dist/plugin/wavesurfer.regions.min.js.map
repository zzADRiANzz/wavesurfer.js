{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/plugin/regions/index.js","webpack://WaveSurfer/./src/plugin/regions/region.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, () => {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {string} background Set the 'background' CSS property of the region.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n * @property {boolean} editMode Determines whether the region is currently being edited or not.\n * @property {boolean} accepted Determines whether the region is accepted or not.\n * @property {string} mode The current mode the region is in - default, edit, accepted, ignored, or restore.\n * @property {string} prevMode=null The previous mode the region was in.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% (based on its initial size) of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            this.defaultEdgeScrollWidth = this.wrapper.clientWidth * scrollWidthProportion;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        // Disabling `region-removed' because destroying the plugin calls\n        // the Region.remove() method that is also used to remove regions based\n        // on user input. This can cause confusion since teardown is not a\n        // user event, but would emit `region-removed` as if it was.\n        this.wavesurfer.setDisabledEventEmissions(['region-removed']);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        params = {\n            edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\n            ...params\n        };\n\n        // Take formatTimeCallback from plugin params if not already set\n        if (!params.formatTimeCallback && this.params.formatTimeCallback) {\n            params = {...params, formatTimeCallback: this.params.formatTimeCallback};\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let touchesToCreateRegion = params.touchesToCreateRegion || 1;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length < touchesToCreateRegion) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            // set the region channel index based on the clicked area\n            if (this.wavesurfer.params.splitChannels) {\n                const y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\n                const channelCount = this.wavesurfer.backend.buffer != null ? this.wavesurfer.backend.buffer.numberOfChannels : 1;\n                const channelHeight = this.wrapper.clientHeight / channelCount;\n                const channelIdx = Math.floor(y / channelHeight);\n                params.channelIdx = channelIdx;\n                const channelColors = this.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\n                if (channelColors && channelColors.dragColor) {\n                    params.color = channelColors.dragColor;\n                }\n            }\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length < touchesToCreateRegion) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        this.background = params.background || null;\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n        this.editMode = params.editMode || false;\n        this.accepted = params.accepted || false;\n        this.mode = params.mode || 'default';\n        this.prevMode = null;\n\n        this.styleOptions = [];\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.channelIdx = channelIdx;\n        this.regionHeight = params.height || '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    addStyleState(data) {\n        const newStyleOptions = {\n            name: data.name ?? 'default',\n            background: data.background ?? `linear-gradient(rgba(0, 0, 0, 0), #ed506acc, rgba(0, 0, 0, 0))`,\n            leftHandleDisplayStyle: data.leftHandleDisplayStyle ?? 'none',\n            rightHandleDisplayStyle: data.rightHandleDisplayStyle ?? 'none',\n            leftBorderStyle: data.leftBorderStyle ?? '',\n            rightBorderStyle: data.rightBorderStyle ?? '',\n            zIndexStyle: data.zIndexStyle ?? 3,\n            regionHoverState: data.regionHoverState ?? false,\n            canResizeRegion: data.canResizeRegion ?? false,\n        }\n\n        this.styleOptions.push(newStyleOptions);\n    }\n\n    setStyleState(styleName) {\n        const match = this.styleOptions.find( ({name}) => { return name === styleName });\n\n        if (match) {\n            this.update({background: match.background});\n\n            this.handleLeftEl.style.display = match.leftHandleDisplayStyle;\n            this.handleRightEl.style.display = match.rightHandleDisplayStyle;\n            this.element.style.borderRight = match.rightBorderStyle;\n            this.element.style.borderLeft = match.leftBorderStyle;\n            this.element.style.zIndex = match.zIndexStyle;\n            match.regionHoverState ? this.element.classList.add('region-hover') : this.element.classList.remove('region-hover');\n\n            this.resize = match.canResizeRegion;\n            this.prevMode = this.mode;\n            this.mode = match.name;\n        } else {\n            const defaultOption = this.styleOptions.find( ({name}) => { name === 'default'});\n            this.update({background: defaultOption.background});\n\n            this.handleLeftEl.style.display = defaultOption.leftHandleDisplayStyle;\n            this.handleRightEl.style.display = defaultOption.rightHandleDisplayStyle;\n            this.element.style.borderRight = defaultOption.rightBorderStyle;\n            this.element.style.borderLeft = defaultOption.leftBorderStyle;\n            this.element.style.zIndex = defaultOption.zIndexStyle;\n            defaultOption.regionHoverState ? this.element.classList.add('region-hover') : this.element.classList.remove('region-hover');\n\n            this.resize = defaultOption.canResizeRegion;\n            this.prevMode = this.mode;\n            this.mode = defaultOption.name;\n        }\n    }\n\n    /* Change the region to default (red) mode. */\n    changeToDefault() {\n        this.update({background: 'linear-gradient(rgba(0, 0, 0, 0), #ed506acc, rgba(0, 0, 0, 0))'});\n\n        this.handleLeftEl.style.display = 'none';\n        this.handleRightEl.style.display = 'none';\n        this.element.style.borderRight = '';\n        this.element.style.borderLeft = '';\n        this.element.style.zIndex = 3;\n        this.element.classList.remove('region-hover');\n\n        this.resize = false;\n        this.prevMode = this.mode;\n        this.mode = 'default';\n    }\n\n    /* Change the region to edit (blue) mode. */\n    changeToEdit() {\n        this.update({background: 'linear-gradient(rgba(0, 0, 0, 0), #225db3c4, rgba(0, 0, 0, 0))'});\n\n        this.handleLeftEl.style.display = 'block';\n        this.handleRightEl.style.display = 'block';\n        this.element.style.borderRight = '2px solid #225DB3';\n        this.element.style.borderLeft = '2px solid #225DB3';\n        this.element.style.zIndex = 4;\n        this.element.classList.remove('region-hover');\n\n        this.resize = true;\n        this.prevMode = this.mode;\n        this.mode = 'edit';\n    }\n\n    /* Change region to accepted (green) mode. */\n    changeToAccepted() {\n        this.update({background: 'linear-gradient(rgba(0, 0, 0, 0), #E7F971cc, rgba(0, 0, 0, 0))'});\n\n        this.handleLeftEl.style.display = 'none';\n        this.handleRightEl.style.display = 'none';\n        this.element.style.borderRight = '';\n        this.element.style.borderLeft = '';\n        this.element.style.zIndex = 3;\n        this.element.classList.remove('region-hover');\n\n        this.resize = false;\n        this.prevMode = this.mode;\n        this.mode = 'accepted';\n    }\n\n    /* Change region to ignore (white) mode. */\n    changeToIgnored() {\n        this.update({background: '#ffffff00'});\n\n        this.handleLeftEl.style.display = 'none';\n        this.handleRightEl.style.display = 'none';\n        this.element.style.borderRight = '2px solid #C8CCCC';\n        this.element.style.borderLeft = '2px solid #C8CCCC';\n        this.element.style.zIndex = 3;\n        this.element.classList.add('region-hover');\n\n        this.resize = false;\n        this.prevMode = this.mode;\n        this.mode = 'ignored';\n    }\n\n    /* Change region to restore (highlighted-white) mode. */\n    changeToRestore() {\n        this.update({background: 'linear-gradient(rgba(0, 0, 0, 0), #C8CCCCcc, rgba(0, 0, 0, 0))'});\n\n        this.handleLeftEl.style.display = 'none';\n        this.handleRightEl.style.display = 'none';\n        this.element.style.borderRight = '2px solid #C8CCCC';\n        this.element.style.borderLeft = '2px solid #C8CCCC';\n        this.element.style.zIndex = 3;\n        this.element.classList.remove('region-hover');\n\n        this.resize = false;\n        this.prevMode = this.mode;\n        this.mode = 'restore';\n    }\n\n\n    /* Update region params. */\n    update(params, eventParams) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.background != null) {\n            this.background = params.background;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element.domElement);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 3,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                background: this.background,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        const eventParams = {\n            direction: this._getDragDirection(delta),\n            action: 'drag'\n        };\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        }, eventParams);\n    }\n\n    /**\n     * Returns the direction of dragging region based on delta\n     * Negative delta means region is moving to the left\n     * Positive - to the right\n     * For zero delta the direction is not defined\n     * @param {number} delta Drag offset\n     * @returns {string|null} Direction 'left', 'right' or null\n     */\n    _getDragDirection(delta) {\n        if (delta < 0) {\n            return 'left';\n        }\n        if (delta > 0) {\n            return 'right';\n        }\n        return null;\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        const eventParams = {\n            action: 'resize',\n            direction: direction === 'start' ? 'left' : 'right'\n        };\n\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            // Check if changing the start by the given delta would result in the region being larger than maxLength\n            if (delta < 0 && this.end - (this.start + delta) > this.maxLength) {\n                delta = this.end - this.start - this.maxLength;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            }, eventParams);\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            // Check if changing the end by the given delta would result in the region being larger than maxLength\n            if (delta > 0 && this.end + delta - this.start > this.maxLength) {\n                delta = this.maxLength - (this.end - this.start);\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            }, eventParams);\n        }\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","RegionsPlugin","params","ws","this","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","orientation","defaultEdgeScrollWidth","clientWidth","regions","region","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","setDisabledEventEmissions","length","wouldExceedMaxRegions","edgeScrollWidth","formatTimeCallback","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","touchesToCreateRegion","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","splitChannels","y","clientY","top","channelCount","backend","buffer","numberOfChannels","channelHeight","clientHeight","channelIdx","floor","channelColors","splitChannelsOptions","dragColor","color","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","background","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","editMode","accepted","mode","prevMode","styleOptions","maxLength","_onRedraw","preventContextMenu","parseInt","regionHeight","height","marginTop","getHeight","bindInOut","render","newStyleOptions","leftHandleDisplayStyle","rightHandleDisplayStyle","leftBorderStyle","rightBorderStyle","zIndexStyle","regionHoverState","canResizeRegion","push","styleName","match","find","display","element","borderRight","borderLeft","zIndex","classList","defaultOption","eventParams","updateHandlesResize","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","cursorStyle","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}